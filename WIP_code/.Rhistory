results(i) = - log(u) / b;
}
return results;
}", depends = "RcppArmadillo")
# comparison
microbenchmark(trunc_exp_custom(100, 1, 4, 6), trunc_exp_custom_CPP(100, 1, 4, 6), times = 1000)
trunc_exp_custom <- function(n, b, a1, a2){
results <- c()
for(i in 1:n){
u <- runif(1) * (exp(-b * a2) - exp(-b * a1)) + exp(-b * a1)
results[i] <- -log(u) / b
}
return(results)
}
x11()
hist(trunc_exp_custom(1000, 1, 4, 6), freq = F, xlim = c(3.5, 6.5), breaks = 25, main = "", xlab = "")
curve(dexp(x, 1) / (pexp(6, 1) - pexp(4, 1)), col = 2, add = T)
#---------------------------
# c++ (using armadillo) implementation
cppFunction("arma::vec trunc_exp_custom_CPP(int n, double b, double a1, double a2){
arma::vec results(n);
double u;
for(int i = 0; i < n; i++){
u = arma::randu() * (exp(-b * a2) - exp(-b * a1)) + exp(-b * a1);
results(i) = - log(u) / b;
}
return results;
}", depends = "RcppArmadillo")
# comparison
microbenchmark(trunc_exp_custom(100, 1, 4, 6), trunc_exp_custom_CPP(100, 1, 4, 6), times = 1000)
custom_sample <- function(n, wei){
results <- c()
cumulate_wei <- cumsum(wei / sum(wei))
for(i in 1:n){
u <- runif(1)
for(j in 1:length(wei)){
if(u < cumulate_wei[j]){
results[i] <- j
break
}
}
}
return(results)
}
microbenchmark(custom_sample(1000, c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.9)),
custom_sample(1000, c(0.9, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01)), times = 1000)
#---------------------------
#---------------------------
# c++ (using armadillo) implementation
cppFunction("arma::vec custom_sample_CPP(int n, arma::vec wei){
arma::vec results(n);
double u;
arma::vec cumulate_wei = arma::cumsum(wei / accu(wei));
for(int i = 0; i < n; i++){
u = arma::randu();
for(int j = 0; j < wei.n_elem; j++){
if(u < cumulate_wei(j)){
results(i) = j + 1;
break;
}
}
}
return results;
}", depends = "RcppArmadillo")
microbenchmark(custom_sample(1000, c(0.1, 0.9, 0.1)),
custom_sample_CPP(1000, c(0.1, 0.9, 0.1)),
sample(1:3, size = 1000, replace = T, prob = c(0.1, 0.9, 0.1)), times = 1000)
biv_normal_gibbs <- function(niter, burnin, thin, x0, mu, sig, rho)
{
results <- matrix(0, nrow = round((niter - burnin) / thin), ncol = 2)
## x0: initial state
x <- x0
pb <- txtProgressBar(min = 1, max = niter, initial = 1, style = 3)
for(j in 1:niter)
{
# For the component x[1], use the value of
# x[2] computed during the previous iteration
x[1] <- rnorm(1, mean = mu[1] + sig[1] / sig[2] * rho * (x[2] - mu[2]),
sd = sqrt(1 - rho^2) * sig[1])
# For x[2] use the value of x[1] just sampled
x[2] <- rnorm(1, mean = mu[2] + sig[2] / sig[1] * rho * (x[1] - mu[1]),
sd = sqrt(1 - rho^2) * sig[2])
# In the output matrix save only the states we visited after the period of burn-in each thin iterations
if(j > burnin & (j - burnin) %% thin==0)
{
results[(j - burnin) / thin, ] <- x
}
setTxtProgressBar(pb, j)
}
close(pb)
return(results)
}
## set the parameters
mu <- c(2, 10)
sig <- c(3, 1)
rho <- 0.25
## var-cov matrix
Sig <- matrix(c(sig[1]^2, rho * sig[1] * sig[2],
rho * sig[1] * sig[2], sig[2]^2), byrow = T, nrow = 2)
Sig
# Visualize the target distribution
# Grids
gr_x1 <- seq(mu[1] - 3 * sig[1], mu[1] + 3 * sig[1], length = 100)
gr_x2 <- seq(mu[2] - 3 * sig[2], mu[2] + 3 * sig[2], length = 100)
ex_grid <- expand.grid(gr_x1, gr_x2)
dens <- apply(ex_grid, 1, function(x) dmvnorm(x, mean = mu, sigma = Sig))
plot_df <- data.frame(x = ex_grid[,1], y = ex_grid[,2], dens = dens)
library(mvtnorm)
library(coda)
library(ggplot2)
library(ggpubr)
biv_normal_gibbs <- function(niter, burnin, thin, x0, mu, sig, rho)
{
results <- matrix(0, nrow = round((niter - burnin) / thin), ncol = 2)
## x0: initial state
x <- x0
pb <- txtProgressBar(min = 1, max = niter, initial = 1, style = 3)
for(j in 1:niter)
{
# For the component x[1], use the value of
# x[2] computed during the previous iteration
x[1] <- rnorm(1, mean = mu[1] + sig[1] / sig[2] * rho * (x[2] - mu[2]),
sd = sqrt(1 - rho^2) * sig[1])
# For x[2] use the value of x[1] just sampled
x[2] <- rnorm(1, mean = mu[2] + sig[2] / sig[1] * rho * (x[1] - mu[1]),
sd = sqrt(1 - rho^2) * sig[2])
# In the output matrix save only the states we visited after the period of burn-in each thin iterations
if(j > burnin & (j - burnin) %% thin==0)
{
results[(j - burnin) / thin, ] <- x
}
setTxtProgressBar(pb, j)
}
close(pb)
return(results)
}
## set the parameters
mu <- c(2, 10)
sig <- c(3, 1)
rho <- 0.25
## var-cov matrix
Sig <- matrix(c(sig[1]^2, rho * sig[1] * sig[2],
rho * sig[1] * sig[2], sig[2]^2), byrow = T, nrow = 2)
Sig
# Visualize the target distribution
# Grids
gr_x1 <- seq(mu[1] - 3 * sig[1], mu[1] + 3 * sig[1], length = 100)
gr_x2 <- seq(mu[2] - 3 * sig[2], mu[2] + 3 * sig[2], length = 100)
ex_grid <- expand.grid(gr_x1, gr_x2)
dens <- apply(ex_grid, 1, function(x) dmvnorm(x, mean = mu, sigma = Sig))
plot_df <- data.frame(x = ex_grid[,1], y = ex_grid[,2], dens = dens)
ggplot(plot_df) +
geom_contour(mapping = aes(x = x, y = y, z = dens)) +
theme_bw()
### -------------------------------------------------------------------------
### RUN THE GIBBS SAMPLER
# set the parameters
niter <- 200000
burnin <- 100000
thin <- 10
x0 <- c(1, 1)
# simulation
set.seed(42)
X <- biv_normal_gibbs(niter = niter, burnin = burnin, thin = thin,
x0 = x0, mu = mu, sig = sig, rho = rho)
### -------------------------------------------------------------------------
# plot the sampled values
ggplot(plot_df) +
geom_point(data = data.frame(x = X[,1], y = X[,2]), mapping = aes(x = x, y = y)) +
geom_contour(mapping = aes(x = x, y = y, z = dens)) +
theme_bw()
X
### -------------------------------------------------------------------------
### DIAGNOSTIC IN CODA
X_mc <- mcmc(data = X, start = burnin + 1, end = niter, thin = thin)
plot(X_mc)
x11()
plot(X_mc)
summary(X_mc)
#install_github("cran/MCMCpack")#, for inverse wishart, but just for the moment
library("MCMCpack")
rm ( list = ls() )
library("mvtnorm")
library("matlib")
library("devtools")
#install_github("cran/MCMCpack")#, for inverse wishart, but just for the moment
library("MCMCpack")
library("invgamma")
library("MixMatrix")
library("gdirmn")
install.packages("MixMatrix")
library(gjam)
n = 5 # number of sites
S = 10 # number of species
n_cov = 5 # number of covariates (no intercept)
f <- gjamSimData(n = n, S = S, Q = n_cov, typeNames = 'PA')
# The object `f` includes elements needed to analyze the simulated data set.
# `f$typeNames` is a length-$S$ `character vector`. The `formula` follows
# standard R syntax. It does not start with `y ~`, because gjam is multivariate.
# The multivariate response is supplied as a $n \times S$ `matrix` or
# `data.frame ydata`.
summary(f)
x = as.matrix(f$xdata) # matrix of measured (environmental) covariates (n * k)
Y = as.matrix(f$ydata) # matrix of n_species presence/absence data (in a continuous framework) (n * S)
Y = Y_sim
mu_e = rep ( 0, times=S ) # Prior mean of e
R <- riwish(S + 1, diag(S)) # Prior variance-covariance matrix of the e
r = 5
eta_h <- rinvgamma(r, 1/2, 1/10^4)
Dz <- riwish(2 + r - 1, 4 * 1/eta_h * diag(r))
# N_stick = truncation level for stick breaking factors, user chosen
N_stick = 15
W <- rmvnorm ( n = n, mean = rep(0, times = r), sigma = diag(r) )
nu = 1
G = 1e3
sigmaeps2 <- 1e4
pl = matrix(0,ncol = N_stick,nrow = S)
muBeta = rep ( 0, times=n_cov ) # Prior mean of the beta coefficients
sigmaBeta = diag ( n_cov ) # Prior variance-covariance matrix of the beta coefficients
B <- matrix(data = 0, nrow = S, ncol = n_cov) # coefficient matrix
for (j in seq(1,S,1)) {
B[j,] <- rmvnorm ( n = 1, mean = muBeta, sigma = 100*sigmaBeta )
}
sigmaB = 10
cardinality_S = rep ( 0, times=N_stick )
n_species = S
n_sites = n
# each label belongs to {1,...,N_stick}
k = c();
p <- numeric(N_stick)
pl <- matrix(0, nrow = n_species, ncol = N_stick)
# Number of iterations
posteriorDraws = 5
burnInIterations = 0
alpha0 = 1e2 # Mass parameter of the Dirichlet process
compute_GD_prior <- function(N_stick, alpha0){
xi <- numeric(N_stick)
for (j in seq(1, N_stick-1)) {
shape1 = alpha0/N_stick + sum(k == j)
shape2 = (N_stick - j)/N_stick * alpha0
for (s in seq(j + 1, N_stick)) {
shape2 = shape2 + sum(k == s)
}
xi[j] <- rbeta(1, shape1 = shape1, shape2 = shape2)
}
return(xi)
}
norm_vec <- function(x) sqrt(sum(x^2))
xi <- compute_GD_prior(N_stick,alpha0)
# c <- 2
# given the vector k = [1,..., 1] of length = S
p[1] <- xi[1]
p[2:N_stick-1] <- sapply(2:N_stick, function(j) xi[j] * prod(1 - xi[1:(j-1)]))
p[N_stick] <- 1 - sum( p[1:N_stick-1] )
k = sample(1:N_stick, size = n_species, replace=TRUE, prob = p)
names(k) <- seq(1,n_species)
V = Y
V_star = matrix(0,nrow = nrow(Y),ncol = ncol(Y))
# start of the Gibbs sampler
for ( niter in 1:(posteriorDraws + burnInIterations) ) { # MCMC loop
# Step 1 : resample the cluster assignments
#for each species j = 1,...,n_species do
Z <- matrix(data = 0, nrow = N_stick, ncol = r)
Q <- matrix(data = 0, nrow = n_species, ncol = N_stick)
# Step 3
for ( l in 1:n_species ) { # Loop on species
for (j in 1:N_stick) {
pl[l,j] <- p[j] * exp( -1/(2*sigmaeps2) * norm_vec(V[,l] - x %*% B[l,] - W %*% Z[j,])^2)
}
k[l] = sample(N_stick, size = 1, replace=TRUE, prob = pl[l,])
}
cardinality_S = rep(0, times = N_stick)
names(cardinality_S) = seq(1,N_stick)
for ( j in 1:N_stick ) {
# Step 1
if (!(j %in% k)) {
#print('entered if')
Z[j,] = rmvnorm ( n = 1, mean = rep(0, times = r), sigma = Dz )
cardinality_S[j] = 1
}
else { # if j in k
#print('entered else')
cardinality_S[j] = sum(j==k)
print(paste('cardinality',cardinality_S[j]))
Sigma_Zj = solve(cardinality_S[j]/sigmaeps2 * t(W) %*% W + solve(Dz) )
mu_Zj = c(0)
for (l in 1:n_species) {
if (k[l] == j){
#print('entered else-if')
mu_Zj = mu_Zj + 1/sigmaeps2 * Sigma_Zj %*% t(W) %*% ( t(t(V[,l])) - x %*% B[l,] )
}
Q[l,k[l]] = 1
}
Z[j,] = rmvnorm ( n = 1, mean = mu_Zj, sigma = Sigma_Zj )
}
}
A = Q %*% Z
# Step 0
# sampling of latent variable parameters mu_V, R_V and simulation of actual V
# Step 2
for ( i in 1:n_sites ) {
Sigma_W = solve(1/sigmaeps2 * t(A) %*% A + diag(r))
mu_W = 1/sigmaeps2 * Sigma_W %*% t(A) %*% (t(t(V[i,])) - B %*% x[i,])
W[i,] = rmvnorm ( n = 1, mean = mu_W, sigma = Sigma_W )
}
# Step 5
dx = c(0)
for (i in 1:n_sites) {
dx = dx + norm_vec(V[i,] - B %*% x[i,] - A %*% W[i,])^2
}
sigmaeps2 = invgamma::rinvgamma(1,shape = (n * S + nu)/2 + 1, rate = dx/2 + nu/G^2)
#sigmaeps2 = 1
# Step 6
Dz = riwish(2 + r + N_stick - 1, t(Z) %*% Z + 4 * 1/eta_h * diag(r))
# Step 7
Sigma_star = A %*% t(A) + sigmaeps2 * diag(S)
D = diag(diag(Sigma_star))
R = D^(1/2) %*% Sigma_star %*% solve(D)^(1/2)
B_star = D^(1/2) %*% B
for (i in seq(1,n)) {
for (j in seq(1,S)) {
mean1 = as.vector(B_star[j,] %*% x[i,] + A[j,] %*% W[i,])
if (Y[i,j] == 1){
V_star[i,j] <- .tnorm(1, 0, Inf, mean1, sigmaeps2)
} else {
V_star[i,j] <- .tnorm(1, -Inf, 0, mean1, sigmaeps2)
}
}
}
V = V_star %*% solve(D)^(1/2)
# Step 8
for (j in seq(1,S,1)) {
muBetaj = solve(1/sigmaB^2 * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x) %*% t(x) %*% (V_star[,j] - W %*% A[j,]) * 1/sigmaeps2
sigmaBetaj = solve(1/(sigmaB^2) * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x)
B[j,] <- rmvnorm ( n = 1, mean = muBetaj, sigma = sigmaBetaj )
}
}
setwd("C:/Users/loren/OneDrive/Desktop/bayesian_project/bayesian_statistics_project/code")
# start of the Gibbs sampler
for ( niter in 1:(posteriorDraws + burnInIterations) ) { # MCMC loop
# Step 1 : resample the cluster assignments
#for each species j = 1,...,n_species do
Z <- matrix(data = 0, nrow = N_stick, ncol = r)
Q <- matrix(data = 0, nrow = n_species, ncol = N_stick)
# Step 3
for ( l in 1:n_species ) { # Loop on species
for (j in 1:N_stick) {
pl[l,j] <- p[j] * exp( -1/(2*sigmaeps2) * norm_vec(V[,l] - x %*% B[l,] - W %*% Z[j,])^2)
}
k[l] = sample(N_stick, size = 1, replace=TRUE, prob = pl[l,])
}
cardinality_S = rep(0, times = N_stick)
names(cardinality_S) = seq(1,N_stick)
for ( j in 1:N_stick ) {
# Step 1
if (!(j %in% k)) {
#print('entered if')
Z[j,] = rmvnorm ( n = 1, mean = rep(0, times = r), sigma = Dz )
cardinality_S[j] = 1
}
else { # if j in k
#print('entered else')
cardinality_S[j] = sum(j==k)
print(paste('cardinality',cardinality_S[j]))
Sigma_Zj = solve(cardinality_S[j]/sigmaeps2 * t(W) %*% W + solve(Dz) )
mu_Zj = c(0)
for (l in 1:n_species) {
if (k[l] == j){
#print('entered else-if')
mu_Zj = mu_Zj + 1/sigmaeps2 * Sigma_Zj %*% t(W) %*% ( t(t(V[,l])) - x %*% B[l,] )
}
Q[l,k[l]] = 1
}
Z[j,] = rmvnorm ( n = 1, mean = mu_Zj, sigma = Sigma_Zj )
}
}
A = Q %*% Z
# Step 0
# sampling of latent variable parameters mu_V, R_V and simulation of actual V
# Step 2
for ( i in 1:n_sites ) {
Sigma_W = solve(1/sigmaeps2 * t(A) %*% A + diag(r))
mu_W = 1/sigmaeps2 * Sigma_W %*% t(A) %*% (t(t(V[i,])) - B %*% x[i,])
W[i,] = rmvnorm ( n = 1, mean = mu_W, sigma = Sigma_W )
}
# Step 5
dx = c(0)
for (i in 1:n_sites) {
dx = dx + norm_vec(V[i,] - B %*% x[i,] - A %*% W[i,])^2
}
sigmaeps2 = invgamma::rinvgamma(1,shape = (n * S + nu)/2 + 1, rate = dx/2 + nu/G^2)
#sigmaeps2 = 1
# Step 6
Dz = riwish(2 + r + N_stick - 1, t(Z) %*% Z + 4 * 1/eta_h * diag(r))
# Step 7
Sigma_star = A %*% t(A) + sigmaeps2 * diag(S)
D = diag(diag(Sigma_star))
R = D^(1/2) %*% Sigma_star %*% solve(D)^(1/2)
B_star = D^(1/2) %*% B
for (i in seq(1,n)) {
for (j in seq(1,S)) {
mean1 = as.vector(B_star[j,] %*% x[i,] + A[j,] %*% W[i,])
if (Y[i,j] == 1){
V_star[i,j] <- .tnorm(1, 0, Inf, mean1, sigmaeps2)
} else {
V_star[i,j] <- .tnorm(1, -Inf, 0, mean1, sigmaeps2)
}
}
}
V = V_star %*% solve(D)^(1/2)
# Step 8
for (j in seq(1,S,1)) {
muBetaj = solve(1/sigmaB^2 * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x) %*% t(x) %*% (V_star[,j] - W %*% A[j,]) * 1/sigmaeps2
sigmaBetaj = solve(1/(sigmaB^2) * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x)
B[j,] <- rmvnorm ( n = 1, mean = muBetaj, sigma = sigmaBetaj )
}
}
.tnorm <- function(n,lo,hi,mu,sig){
#normal truncated lo and hi
tiny <- 10e-6
if(length(lo) == 1 & length(mu) > 1)lo <- rep(lo,length(mu))
if(length(hi) == 1 & length(mu) > 1)hi <- rep(hi,length(mu))
q1 <- pnorm(lo,mu,sig)
q2 <- pnorm(hi,mu,sig)
z <- runif(n,q1,q2)
z <- qnorm(z,mu,sig)
print(z)
z[z == Inf]  <- lo[z == Inf] + tiny
#z[z == -Inf] <- hi[z == -Inf] - tiny
z
}
# start of the Gibbs sampler
for ( niter in 1:(posteriorDraws + burnInIterations) ) { # MCMC loop
# Step 1 : resample the cluster assignments
#for each species j = 1,...,n_species do
Z <- matrix(data = 0, nrow = N_stick, ncol = r)
Q <- matrix(data = 0, nrow = n_species, ncol = N_stick)
# Step 3
for ( l in 1:n_species ) { # Loop on species
for (j in 1:N_stick) {
pl[l,j] <- p[j] * exp( -1/(2*sigmaeps2) * norm_vec(V[,l] - x %*% B[l,] - W %*% Z[j,])^2)
}
k[l] = sample(N_stick, size = 1, replace=TRUE, prob = pl[l,])
}
cardinality_S = rep(0, times = N_stick)
names(cardinality_S) = seq(1,N_stick)
for ( j in 1:N_stick ) {
# Step 1
if (!(j %in% k)) {
#print('entered if')
Z[j,] = rmvnorm ( n = 1, mean = rep(0, times = r), sigma = Dz )
cardinality_S[j] = 1
}
else { # if j in k
#print('entered else')
cardinality_S[j] = sum(j==k)
print(paste('cardinality',cardinality_S[j]))
Sigma_Zj = solve(cardinality_S[j]/sigmaeps2 * t(W) %*% W + solve(Dz) )
mu_Zj = c(0)
for (l in 1:n_species) {
if (k[l] == j){
#print('entered else-if')
mu_Zj = mu_Zj + 1/sigmaeps2 * Sigma_Zj %*% t(W) %*% ( t(t(V[,l])) - x %*% B[l,] )
}
Q[l,k[l]] = 1
}
Z[j,] = rmvnorm ( n = 1, mean = mu_Zj, sigma = Sigma_Zj )
}
}
A = Q %*% Z
# Step 0
# sampling of latent variable parameters mu_V, R_V and simulation of actual V
# Step 2
for ( i in 1:n_sites ) {
Sigma_W = solve(1/sigmaeps2 * t(A) %*% A + diag(r))
mu_W = 1/sigmaeps2 * Sigma_W %*% t(A) %*% (t(t(V[i,])) - B %*% x[i,])
W[i,] = rmvnorm ( n = 1, mean = mu_W, sigma = Sigma_W )
}
# Step 5
dx = c(0)
for (i in 1:n_sites) {
dx = dx + norm_vec(V[i,] - B %*% x[i,] - A %*% W[i,])^2
}
sigmaeps2 = invgamma::rinvgamma(1,shape = (n * S + nu)/2 + 1, rate = dx/2 + nu/G^2)
#sigmaeps2 = 1
# Step 6
Dz = riwish(2 + r + N_stick - 1, t(Z) %*% Z + 4 * 1/eta_h * diag(r))
# Step 7
Sigma_star = A %*% t(A) + sigmaeps2 * diag(S)
D = diag(diag(Sigma_star))
R = D^(1/2) %*% Sigma_star %*% solve(D)^(1/2)
B_star = D^(1/2) %*% B
for (i in seq(1,n)) {
for (j in seq(1,S)) {
mean1 = as.vector(B_star[j,] %*% x[i,] + A[j,] %*% W[i,])
if (Y[i,j] == 1){
V_star[i,j] <- .tnorm(1, 0, Inf, mean1, sigmaeps2)
} else {
V_star[i,j] <- .tnorm(1, -Inf, 0, mean1, sigmaeps2)
}
}
}
V = V_star %*% solve(D)^(1/2)
# Step 8
for (j in seq(1,S,1)) {
muBetaj = solve(1/sigmaB^2 * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x) %*% t(x) %*% (V_star[,j] - W %*% A[j,]) * 1/sigmaeps2
sigmaBetaj = solve(1/(sigmaB^2) * diag(n_cov) + 1/sigmaeps2 * t(x) %*% x)
B[j,] <- rmvnorm ( n = 1, mean = muBetaj, sigma = sigmaBetaj )
}
}
print(A)
print(k)
